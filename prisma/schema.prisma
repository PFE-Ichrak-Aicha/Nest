// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Nom          String                @db.VarChar(80)
  Prenom       String                @db.VarChar(80)
  NumTel       String                @db.VarChar(8)
  Adresse      String
  email        String                @unique @db.VarChar(80)
  MotDePasse   String                @db.VarChar(80)
  Ville        String
  CodePostal   String?
  PhotoProfil  String?
  isAdmin      Boolean               @default(false)
  //MotDePasseConfirmation String        @db.VarChar(80)
  resetCode    String?
  publications Publication[]         @relation("user_publications")
  favorites    PublicationFavorite[]
  subscriptions Subscription[]
}

model Publication {
  pubid Int @id @default(autoincrement())

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  marque           String        @db.VarChar(20)
  model            String        @db.VarChar(30)
  anneeFabrication Int           @db.Int()
  nombrePlace      Int           @db.Int()
  couleur          String        @db.VarChar(30)
  kilometrage      Int           @db.Int()
  prix             Float
  descrption       String?       @db.VarChar(400)
  typeCarburant    TypeCarburant
  userId           Int // Foreign key referencing User
  images           Image[]
  video            Video?        @relation(fields: [videoId], references: [id])
  videoId          Int?          @unique

  // Define the relation to User
  user    User                  @relation("user_publications", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  favoris PublicationFavorite[]
}

enum TypeCarburant {
  Essence
  Diesel
  GPL
  Electrique
}

model Video {
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  id          Int          @id @default(autoincrement())
  url         String
  publication Publication?
}

model Image {
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  id            Int         @id @default(autoincrement())
  path          String
  publicationId Int
  publication   Publication @relation(fields: [publicationId], references: [pubid])
}

model PublicationFavorite {
  userId        Int
  publicationId Int
  idpf Int @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  publication Publication @relation(fields: [publicationId], references: [pubid])
}
model Subscription {
  ids        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key to the User model
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  name      String
  price     Float
  duration  Int
  description String
}
